plugins {
	id 'java-library'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.180'
	id "com.hypherionmc.modutils.modpublisher" version "2.1.6"
	id 'idea'
}

apply from: 'optimization_utils.gradle'

repositories {
	mavenLocal()
	maven {
		name "AnonymousHacker1279"
		url "https://maven.anonymoushacker1279.tech/releases"

		credentials(PasswordCredentials)
		authentication {
			basic(BasicAuthentication)
		}
	}
	maven {
		name "AnonymousHacker1279Snapshots"
		url "https://maven.anonymoushacker1279.tech/snapshots"

		credentials(PasswordCredentials)
		authentication {
			basic(BasicAuthentication)
		}
	}
	maven {
		name "Jared's Maven"
		url 'https://maven.blamejared.com'
	}
	maven {
		name "ModMaven"
		url "https://modmaven.dev/"
	}
	maven {
		name "Maven Central"
		url "https://repo.maven.apache.org/maven2"
	}
	maven {
		name "Bai Maven"
		url "https://maven2.bai.lol"
	}
	maven {
		name = "Illusive Soulworks Maven"
		url = "https://maven.theillusivec4.top"
	}
	maven {
		url = "https://api.modrinth.com/maven"
	}
}


version = mod_version
group = mod_group_id

base {
	archivesName = project.mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
	main {
		resources {
			// Include resources generated by data generators.
			srcDirs += "src/generated/resources"
		}
	}
	generated

	// Separate datagen sourceSet from main to shrink the build jar
	datagen {
		compileClasspath += main.output
	}
}

// Ensure other source sets receive the necessary dependencies
configurations {
	extendConfigurations(implementation, testImplementation, datagenImplementation)
	extendConfigurations(compileOnly, testCompileOnly, datagenCompileOnly)
	extendConfigurations(runtimeOnly, testRuntimeOnly, datagenRuntimeOnly)
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
	for (configuration in configurations) {
		configuration.extendsFrom(base)
	}
}

runs {
	configureEach {
		systemProperty 'forge.logging.markers', 'REGISTRIES'
		systemProperty 'forge.logging.console.level', 'debug'

		jvmArguments.addAll '-Xmx6G'

		// If the selected toolchain is a JBR, enable DCEVM for improved hotswapping
		if (it.project.javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse("").contains("JetBrains")) {
			jvmArguments.addAll '-XX:+AllowEnhancedClassRedefinition'
		}

		modSources project.sourceSets.main, project.sourceSets.datagen
	}

	client {
		// Setup client information from gradle.properties in the user home
		// All of these are optional
		if (project.hasProperty('mc_uuid')) {
			arguments('--uuid', (String) project.property('mc_uuid'))
		}
		if (project.hasProperty('mc_username')) {
			arguments('--username', (String) project.property('mc_username'))
		}
		if (project.hasProperty('mc_accessToken')) {
			arguments('--accessToken', (String) project.property('mc_accessToken'))
		}
	}

	server {
		arguments '--nogui'
	}

	data {
		arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

// Include resources generated by data generators
sourceSets.main.resources {
	srcDir 'src/generated/resources'
	// Exclude the cache directory
	exclude '.cache'
}

dependencies {
	implementation 'org.jetbrains:annotations:24.1.0'

	implementation "net.neoforged:neoforge:${neoforge_version}"

	// Include Immersive Weapons
	implementation "tech.anonymoushacker1279.immersiveweapons:ImmersiveWeapons:${immersiveweapons_version}"

	// Include JEI
	compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
	runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
	// Include WTHIT and badpackets
	compileOnly "mcp.mobius.waila:wthit-api:neo-${wthit_version}"
	runtimeOnly "mcp.mobius.waila:wthit:neo-${wthit_version}"
	compileOnly "lol.bai:badpackets:neo-${badpackets_version}"
	// Include Curios
	compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"
	runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"
	// Include Mekanism
	implementation "mekanism:Mekanism:${mekanism_version}"
	runtimeOnly "mekanism:Mekanism:${mekanism_version}:generators"
	// Include RyoamicLights and its dependencies
	implementation "maven.modrinth:ryoamiclights:${ryoamiclights_version}-neoforge"
	runtimeOnly "maven.modrinth:obsidianui:${obsidianui_version}-neoforge"
}

tasks.named('processResources', ProcessResources).configure {
	def replaceProperties = [
			minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
			neoforge_version    : neoforge_version, neoforge_version_range: neoforge_version_range,
			loader_version_range: loader_version_range, mod_version: mod_version
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties + [project: project]
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : "AnonymousHacker1279",
				'Specification-Version'   : '1',
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : "AnonymousHacker1279",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			name "AnonymousHacker1279"

			def baseMavenUrl = "https://maven.anonymoushacker1279.tech/"
			url mod_version.contains("SNAPSHOT") ? baseMavenUrl + "snapshots" : baseMavenUrl + "releases"

			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

if (file("RELEASE_NOTES.md").exists()) {
	publisher {
		apiKeys {
			// Load API keys from tokens.properties file
			def tokens = new Properties()
			file("tokens.properties").withInputStream {
				stream -> tokens.load(stream)
			}

			curseforge = tokens.getProperty("curseforge")
			modrinth = tokens.getProperty("modrinth")
		}

		setDebug(false)
		setCurseID("633345")
		setModrinthID("SAUGybfH")
		setGithubRepo("AnonymousHacker1279/IWCompatibilityBridge")
		setVersionType("release")
		// Read the contents of the RELEASE_NOTES.md file
		setChangelog(file("RELEASE_NOTES.md").text)
		// Get the IWCB version from the mod_version variable, it's the last part of the version string
		setVersion("v" + mod_version.split("-")[1])
		setDisplayName("Immersive Weapons Compatibility Bridge - v" + mod_version.split("-")[1])
		setGameVersions([minecraft_version])
		setLoaders("neoforge")
		setCurseEnvironment("both")
		setArtifact(tasks.jar)
		setJavaVersions([JavaVersion.VERSION_21])

		curseDepends {
			required "immersive-weapons"
			optional "jei", "wthit-forge", "adorned", "mekanism", "ryoamiclights"
		}

		modrinthDepends {
			required "immersive-weapons"
			optional "jei", "wthit", "mekanism", "ryoamiclights" // Adorned is not on Modrinth
		}
	}
} else {
	println("No RELEASE_NOTES.md found, publishing outside of Maven is disabled.")
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
	options.fork = true // Use a separate JVM process for Java compilation
}